// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: natsserver/v1/metadata.proto

package natsserverpb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AckPolicy int32

const (
	AckPolicy_AckNone     AckPolicy = 0
	AckPolicy_AckAll      AckPolicy = 1
	AckPolicy_AckExplicit AckPolicy = 2
)

// Enum value maps for AckPolicy.
var (
	AckPolicy_name = map[int32]string{
		0: "AckNone",
		1: "AckAll",
		2: "AckExplicit",
	}
	AckPolicy_value = map[string]int32{
		"AckNone":     0,
		"AckAll":      1,
		"AckExplicit": 2,
	}
)

func (x AckPolicy) Enum() *AckPolicy {
	p := new(AckPolicy)
	*p = x
	return p
}

func (x AckPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AckPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_natsserver_v1_metadata_proto_enumTypes[0].Descriptor()
}

func (AckPolicy) Type() protoreflect.EnumType {
	return &file_natsserver_v1_metadata_proto_enumTypes[0]
}

func (x AckPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AckPolicy.Descriptor instead.
func (AckPolicy) EnumDescriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{0}
}

type ReplayPolicy int32

const (
	ReplayPolicy_ReplayInstant  ReplayPolicy = 0
	ReplayPolicy_ReplayOriginal ReplayPolicy = 1
)

// Enum value maps for ReplayPolicy.
var (
	ReplayPolicy_name = map[int32]string{
		0: "ReplayInstant",
		1: "ReplayOriginal",
	}
	ReplayPolicy_value = map[string]int32{
		"ReplayInstant":  0,
		"ReplayOriginal": 1,
	}
)

func (x ReplayPolicy) Enum() *ReplayPolicy {
	p := new(ReplayPolicy)
	*p = x
	return p
}

func (x ReplayPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplayPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_natsserver_v1_metadata_proto_enumTypes[1].Descriptor()
}

func (ReplayPolicy) Type() protoreflect.EnumType {
	return &file_natsserver_v1_metadata_proto_enumTypes[1]
}

func (x ReplayPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplayPolicy.Descriptor instead.
func (ReplayPolicy) EnumDescriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{1}
}

type DeliverPolicy int32

const (
	DeliverPolicy_DeliverAll             DeliverPolicy = 0
	DeliverPolicy_DeliverLast            DeliverPolicy = 1
	DeliverPolicy_DeliverNew             DeliverPolicy = 2
	DeliverPolicy_DeliverByStartSequence DeliverPolicy = 3
	DeliverPolicy_DeliverByStartTime     DeliverPolicy = 4
	DeliverPolicy_DeliverLastPerSubject  DeliverPolicy = 5
)

// Enum value maps for DeliverPolicy.
var (
	DeliverPolicy_name = map[int32]string{
		0: "DeliverAll",
		1: "DeliverLast",
		2: "DeliverNew",
		3: "DeliverByStartSequence",
		4: "DeliverByStartTime",
		5: "DeliverLastPerSubject",
	}
	DeliverPolicy_value = map[string]int32{
		"DeliverAll":             0,
		"DeliverLast":            1,
		"DeliverNew":             2,
		"DeliverByStartSequence": 3,
		"DeliverByStartTime":     4,
		"DeliverLastPerSubject":  5,
	}
)

func (x DeliverPolicy) Enum() *DeliverPolicy {
	p := new(DeliverPolicy)
	*p = x
	return p
}

func (x DeliverPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliverPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_natsserver_v1_metadata_proto_enumTypes[2].Descriptor()
}

func (DeliverPolicy) Type() protoreflect.EnumType {
	return &file_natsserver_v1_metadata_proto_enumTypes[2]
}

func (x DeliverPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliverPolicy.Descriptor instead.
func (DeliverPolicy) EnumDescriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{2}
}

type RetentionPolicy int32

const (
	RetentionPolicy_RetentionPolicyLimits    RetentionPolicy = 0
	RetentionPolicy_RetentionPolicyInterest  RetentionPolicy = 1
	RetentionPolicy_RetentionPolicyWorkQueue RetentionPolicy = 2
)

// Enum value maps for RetentionPolicy.
var (
	RetentionPolicy_name = map[int32]string{
		0: "RetentionPolicyLimits",
		1: "RetentionPolicyInterest",
		2: "RetentionPolicyWorkQueue",
	}
	RetentionPolicy_value = map[string]int32{
		"RetentionPolicyLimits":    0,
		"RetentionPolicyInterest":  1,
		"RetentionPolicyWorkQueue": 2,
	}
)

func (x RetentionPolicy) Enum() *RetentionPolicy {
	p := new(RetentionPolicy)
	*p = x
	return p
}

func (x RetentionPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetentionPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_natsserver_v1_metadata_proto_enumTypes[3].Descriptor()
}

func (RetentionPolicy) Type() protoreflect.EnumType {
	return &file_natsserver_v1_metadata_proto_enumTypes[3]
}

func (x RetentionPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetentionPolicy.Descriptor instead.
func (RetentionPolicy) EnumDescriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{3}
}

type DiscardPolicy int32

const (
	DiscardPolicy_DiscardOld DiscardPolicy = 0
	DiscardPolicy_DiscardNew DiscardPolicy = 1
)

// Enum value maps for DiscardPolicy.
var (
	DiscardPolicy_name = map[int32]string{
		0: "DiscardOld",
		1: "DiscardNew",
	}
	DiscardPolicy_value = map[string]int32{
		"DiscardOld": 0,
		"DiscardNew": 1,
	}
)

func (x DiscardPolicy) Enum() *DiscardPolicy {
	p := new(DiscardPolicy)
	*p = x
	return p
}

func (x DiscardPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscardPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_natsserver_v1_metadata_proto_enumTypes[4].Descriptor()
}

func (DiscardPolicy) Type() protoreflect.EnumType {
	return &file_natsserver_v1_metadata_proto_enumTypes[4]
}

func (x DiscardPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscardPolicy.Descriptor instead.
func (DiscardPolicy) EnumDescriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{4}
}

type StorageType int32

const (
	StorageType_StorageTypeUnknown    StorageType = 0
	StorageType_StorageTypeFile       StorageType = 22
	StorageType_StorageTypeMemory     StorageType = 33
	StorageType_StorageTypeMemoryOnly StorageType = 44
)

// Enum value maps for StorageType.
var (
	StorageType_name = map[int32]string{
		0:  "StorageTypeUnknown",
		22: "StorageTypeFile",
		33: "StorageTypeMemory",
		44: "StorageTypeMemoryOnly",
	}
	StorageType_value = map[string]int32{
		"StorageTypeUnknown":    0,
		"StorageTypeFile":       22,
		"StorageTypeMemory":     33,
		"StorageTypeMemoryOnly": 44,
	}
)

func (x StorageType) Enum() *StorageType {
	p := new(StorageType)
	*p = x
	return p
}

func (x StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_natsserver_v1_metadata_proto_enumTypes[5].Descriptor()
}

func (StorageType) Type() protoreflect.EnumType {
	return &file_natsserver_v1_metadata_proto_enumTypes[5]
}

func (x StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageType.Descriptor instead.
func (StorageType) EnumDescriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{5}
}

type StoreCompression int32

const (
	StoreCompression_None StoreCompression = 0
	StoreCompression_S2   StoreCompression = 1
)

// Enum value maps for StoreCompression.
var (
	StoreCompression_name = map[int32]string{
		0: "None",
		1: "S2",
	}
	StoreCompression_value = map[string]int32{
		"None": 0,
		"S2":   1,
	}
)

func (x StoreCompression) Enum() *StoreCompression {
	p := new(StoreCompression)
	*p = x
	return p
}

func (x StoreCompression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoreCompression) Descriptor() protoreflect.EnumDescriptor {
	return file_natsserver_v1_metadata_proto_enumTypes[6].Descriptor()
}

func (StoreCompression) Type() protoreflect.EnumType {
	return &file_natsserver_v1_metadata_proto_enumTypes[6]
}

func (x StoreCompression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoreCompression.Descriptor instead.
func (StoreCompression) EnumDescriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{6}
}

type PriorityPolicy int32

const (
	PriorityPolicy_PriorityNone         PriorityPolicy = 0
	PriorityPolicy_PriorityOvewflow     PriorityPolicy = 1
	PriorityPolicy_PriorityPinnedClient PriorityPolicy = 2
)

// Enum value maps for PriorityPolicy.
var (
	PriorityPolicy_name = map[int32]string{
		0: "PriorityNone",
		1: "PriorityOvewflow",
		2: "PriorityPinnedClient",
	}
	PriorityPolicy_value = map[string]int32{
		"PriorityNone":         0,
		"PriorityOvewflow":     1,
		"PriorityPinnedClient": 2,
	}
)

func (x PriorityPolicy) Enum() *PriorityPolicy {
	p := new(PriorityPolicy)
	*p = x
	return p
}

func (x PriorityPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriorityPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_natsserver_v1_metadata_proto_enumTypes[7].Descriptor()
}

func (PriorityPolicy) Type() protoreflect.EnumType {
	return &file_natsserver_v1_metadata_proto_enumTypes[7]
}

func (x PriorityPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriorityPolicy.Descriptor instead.
func (PriorityPolicy) EnumDescriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{7}
}

type StreamMetadata struct {
	state             protoimpl.MessageState       `protogen:"open.v1"`
	StreamAssignments []*WriteableStreamAssignment `protobuf:"bytes,1,rep,name=stream_assignments,json=streamAssignments,proto3" json:"stream_assignments,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamMetadata) Reset() {
	*x = StreamMetadata{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetadata) ProtoMessage() {}

func (x *StreamMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetadata.ProtoReflect.Descriptor instead.
func (*StreamMetadata) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *StreamMetadata) GetStreamAssignments() []*WriteableStreamAssignment {
	if x != nil {
		return x.StreamAssignments
	}
	return nil
}

type WriteableStreamAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Client        *ClientInfo            `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	Config        *StreamConfig          `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	Group         *RaftGroup             `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	Sync          string                 `protobuf:"bytes,5,opt,name=sync,proto3" json:"sync,omitempty"`
	Consumers     []*ConsumerAssignment  `protobuf:"bytes,6,rep,name=consumers,proto3" json:"consumers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteableStreamAssignment) Reset() {
	*x = WriteableStreamAssignment{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteableStreamAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteableStreamAssignment) ProtoMessage() {}

func (x *WriteableStreamAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteableStreamAssignment.ProtoReflect.Descriptor instead.
func (*WriteableStreamAssignment) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *WriteableStreamAssignment) GetClient() *ClientInfo {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *WriteableStreamAssignment) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *WriteableStreamAssignment) GetConfig() *StreamConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WriteableStreamAssignment) GetGroup() *RaftGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *WriteableStreamAssignment) GetSync() string {
	if x != nil {
		return x.Sync
	}
	return ""
}

func (x *WriteableStreamAssignment) GetConsumers() []*ConsumerAssignment {
	if x != nil {
		return x.Consumers
	}
	return nil
}

type ConsumerAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientInfo    *ClientInfo            `protobuf:"bytes,1,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Stream        string                 `protobuf:"bytes,4,opt,name=stream,proto3" json:"stream,omitempty"`
	Config        *ConsumerConfig        `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Group         *RaftGroup             `protobuf:"bytes,6,opt,name=group,proto3" json:"group,omitempty"`
	Subject       string                 `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Reply         string                 `protobuf:"bytes,8,opt,name=reply,proto3" json:"reply,omitempty"`
	State         *ConsumerState         `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsumerAssignment) Reset() {
	*x = ConsumerAssignment{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerAssignment) ProtoMessage() {}

func (x *ConsumerAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerAssignment.ProtoReflect.Descriptor instead.
func (*ConsumerAssignment) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *ConsumerAssignment) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *ConsumerAssignment) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ConsumerAssignment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConsumerAssignment) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ConsumerAssignment) GetConfig() *ConsumerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ConsumerAssignment) GetGroup() *RaftGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ConsumerAssignment) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ConsumerAssignment) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *ConsumerAssignment) GetState() *ConsumerState {
	if x != nil {
		return x.State
	}
	return nil
}

type ConsumerConfig struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Durable            string                 `protobuf:"bytes,1,opt,name=durable,proto3" json:"durable,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DeliverPolicy      DeliverPolicy          `protobuf:"varint,4,opt,name=deliver_policy,json=deliverPolicy,proto3,enum=natsserver.v1.DeliverPolicy" json:"deliver_policy,omitempty"`
	OptStartSeq        uint64                 `protobuf:"varint,5,opt,name=opt_start_seq,json=optStartSeq,proto3" json:"opt_start_seq,omitempty"`
	OptStartTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=opt_start_time,json=optStartTime,proto3" json:"opt_start_time,omitempty"`
	AckPolicy          AckPolicy              `protobuf:"varint,7,opt,name=ack_policy,json=ackPolicy,proto3,enum=natsserver.v1.AckPolicy" json:"ack_policy,omitempty"`
	AckWait            *durationpb.Duration   `protobuf:"bytes,8,opt,name=ack_wait,json=ackWait,proto3" json:"ack_wait,omitempty"`
	MaxDeliver         uint32                 `protobuf:"varint,9,opt,name=max_deliver,json=maxDeliver,proto3" json:"max_deliver,omitempty"`
	Backoff            []*durationpb.Duration `protobuf:"bytes,10,rep,name=backoff,proto3" json:"backoff,omitempty"`
	FilterSubject      string                 `protobuf:"bytes,11,opt,name=filter_subject,json=filterSubject,proto3" json:"filter_subject,omitempty"`
	FilterSubjects     []string               `protobuf:"bytes,12,rep,name=filter_subjects,json=filterSubjects,proto3" json:"filter_subjects,omitempty"`
	ReplayPolicy       ReplayPolicy           `protobuf:"varint,13,opt,name=replay_policy,json=replayPolicy,proto3,enum=natsserver.v1.ReplayPolicy" json:"replay_policy,omitempty"`
	RateLimit          uint64                 `protobuf:"varint,14,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	SampleFrequency    string                 `protobuf:"bytes,15,opt,name=sample_frequency,json=sampleFrequency,proto3" json:"sample_frequency,omitempty"`
	MaxWaiting         uint32                 `protobuf:"varint,16,opt,name=max_waiting,json=maxWaiting,proto3" json:"max_waiting,omitempty"`
	MaxAckPending      uint32                 `protobuf:"varint,17,opt,name=max_ack_pending,json=maxAckPending,proto3" json:"max_ack_pending,omitempty"`
	FlowControl        bool                   `protobuf:"varint,18,opt,name=flow_control,json=flowControl,proto3" json:"flow_control,omitempty"`
	HeadersOnly        bool                   `protobuf:"varint,19,opt,name=headers_only,json=headersOnly,proto3" json:"headers_only,omitempty"`
	MaxRequestBatch    uint32                 `protobuf:"varint,20,opt,name=max_request_batch,json=maxRequestBatch,proto3" json:"max_request_batch,omitempty"`
	MaxRequestExpires  *durationpb.Duration   `protobuf:"bytes,21,opt,name=max_request_expires,json=maxRequestExpires,proto3" json:"max_request_expires,omitempty"`
	MaxRequestMaxBytes uint32                 `protobuf:"varint,22,opt,name=max_request_max_bytes,json=maxRequestMaxBytes,proto3" json:"max_request_max_bytes,omitempty"`
	DeliverSubject     string                 `protobuf:"bytes,23,opt,name=deliver_subject,json=deliverSubject,proto3" json:"deliver_subject,omitempty"`
	DeliverGroup       string                 `protobuf:"bytes,24,opt,name=deliver_group,json=deliverGroup,proto3" json:"deliver_group,omitempty"`
	Heartbeat          *durationpb.Duration   `protobuf:"bytes,25,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	InactiveThreshold  *durationpb.Duration   `protobuf:"bytes,26,opt,name=inactive_threshold,json=inactiveThreshold,proto3" json:"inactive_threshold,omitempty"`
	Replicas           uint32                 `protobuf:"varint,27,opt,name=replicas,proto3" json:"replicas,omitempty"`
	MemoryStorage      bool                   `protobuf:"varint,28,opt,name=memory_storage,json=memoryStorage,proto3" json:"memory_storage,omitempty"`
	Direct             bool                   `protobuf:"varint,29,opt,name=direct,proto3" json:"direct,omitempty"`
	Metadata           map[string]string      `protobuf:"bytes,30,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PauseUntil         *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=pause_until,json=pauseUntil,proto3" json:"pause_until,omitempty"`
	PriorityGroups     []string               `protobuf:"bytes,32,rep,name=priority_groups,json=priorityGroups,proto3" json:"priority_groups,omitempty"`
	PriorityPolicy     PriorityPolicy         `protobuf:"varint,33,opt,name=priority_policy,json=priorityPolicy,proto3,enum=natsserver.v1.PriorityPolicy" json:"priority_policy,omitempty"`
	PinnedTtl          *durationpb.Duration   `protobuf:"bytes,34,opt,name=pinned_ttl,json=pinnedTtl,proto3" json:"pinned_ttl,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ConsumerConfig) Reset() {
	*x = ConsumerConfig{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerConfig) ProtoMessage() {}

func (x *ConsumerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerConfig.ProtoReflect.Descriptor instead.
func (*ConsumerConfig) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *ConsumerConfig) GetDurable() string {
	if x != nil {
		return x.Durable
	}
	return ""
}

func (x *ConsumerConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConsumerConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConsumerConfig) GetDeliverPolicy() DeliverPolicy {
	if x != nil {
		return x.DeliverPolicy
	}
	return DeliverPolicy_DeliverAll
}

func (x *ConsumerConfig) GetOptStartSeq() uint64 {
	if x != nil {
		return x.OptStartSeq
	}
	return 0
}

func (x *ConsumerConfig) GetOptStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OptStartTime
	}
	return nil
}

func (x *ConsumerConfig) GetAckPolicy() AckPolicy {
	if x != nil {
		return x.AckPolicy
	}
	return AckPolicy_AckNone
}

func (x *ConsumerConfig) GetAckWait() *durationpb.Duration {
	if x != nil {
		return x.AckWait
	}
	return nil
}

func (x *ConsumerConfig) GetMaxDeliver() uint32 {
	if x != nil {
		return x.MaxDeliver
	}
	return 0
}

func (x *ConsumerConfig) GetBackoff() []*durationpb.Duration {
	if x != nil {
		return x.Backoff
	}
	return nil
}

func (x *ConsumerConfig) GetFilterSubject() string {
	if x != nil {
		return x.FilterSubject
	}
	return ""
}

func (x *ConsumerConfig) GetFilterSubjects() []string {
	if x != nil {
		return x.FilterSubjects
	}
	return nil
}

func (x *ConsumerConfig) GetReplayPolicy() ReplayPolicy {
	if x != nil {
		return x.ReplayPolicy
	}
	return ReplayPolicy_ReplayInstant
}

func (x *ConsumerConfig) GetRateLimit() uint64 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

func (x *ConsumerConfig) GetSampleFrequency() string {
	if x != nil {
		return x.SampleFrequency
	}
	return ""
}

func (x *ConsumerConfig) GetMaxWaiting() uint32 {
	if x != nil {
		return x.MaxWaiting
	}
	return 0
}

func (x *ConsumerConfig) GetMaxAckPending() uint32 {
	if x != nil {
		return x.MaxAckPending
	}
	return 0
}

func (x *ConsumerConfig) GetFlowControl() bool {
	if x != nil {
		return x.FlowControl
	}
	return false
}

func (x *ConsumerConfig) GetHeadersOnly() bool {
	if x != nil {
		return x.HeadersOnly
	}
	return false
}

func (x *ConsumerConfig) GetMaxRequestBatch() uint32 {
	if x != nil {
		return x.MaxRequestBatch
	}
	return 0
}

func (x *ConsumerConfig) GetMaxRequestExpires() *durationpb.Duration {
	if x != nil {
		return x.MaxRequestExpires
	}
	return nil
}

func (x *ConsumerConfig) GetMaxRequestMaxBytes() uint32 {
	if x != nil {
		return x.MaxRequestMaxBytes
	}
	return 0
}

func (x *ConsumerConfig) GetDeliverSubject() string {
	if x != nil {
		return x.DeliverSubject
	}
	return ""
}

func (x *ConsumerConfig) GetDeliverGroup() string {
	if x != nil {
		return x.DeliverGroup
	}
	return ""
}

func (x *ConsumerConfig) GetHeartbeat() *durationpb.Duration {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

func (x *ConsumerConfig) GetInactiveThreshold() *durationpb.Duration {
	if x != nil {
		return x.InactiveThreshold
	}
	return nil
}

func (x *ConsumerConfig) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *ConsumerConfig) GetMemoryStorage() bool {
	if x != nil {
		return x.MemoryStorage
	}
	return false
}

func (x *ConsumerConfig) GetDirect() bool {
	if x != nil {
		return x.Direct
	}
	return false
}

func (x *ConsumerConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ConsumerConfig) GetPauseUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.PauseUntil
	}
	return nil
}

func (x *ConsumerConfig) GetPriorityGroups() []string {
	if x != nil {
		return x.PriorityGroups
	}
	return nil
}

func (x *ConsumerConfig) GetPriorityPolicy() PriorityPolicy {
	if x != nil {
		return x.PriorityPolicy
	}
	return PriorityPolicy_PriorityNone
}

func (x *ConsumerConfig) GetPinnedTtl() *durationpb.Duration {
	if x != nil {
		return x.PinnedTtl
	}
	return nil
}

type SequencePair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Consumer      uint64                 `protobuf:"varint,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Stream        uint64                 `protobuf:"varint,2,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequencePair) Reset() {
	*x = SequencePair{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequencePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencePair) ProtoMessage() {}

func (x *SequencePair) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencePair.ProtoReflect.Descriptor instead.
func (*SequencePair) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *SequencePair) GetConsumer() uint64 {
	if x != nil {
		return x.Consumer
	}
	return 0
}

func (x *SequencePair) GetStream() uint64 {
	if x != nil {
		return x.Stream
	}
	return 0
}

type ConsumerState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Delivered     *SequencePair          `protobuf:"bytes,1,opt,name=delivered,proto3" json:"delivered,omitempty"`
	AckFloor      *SequencePair          `protobuf:"bytes,2,opt,name=ack_floor,json=ackFloor,proto3" json:"ack_floor,omitempty"`
	Pending       map[uint64]*Pending    `protobuf:"bytes,3,rep,name=pending,proto3" json:"pending,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Redelivered   map[uint64]uint64      `protobuf:"bytes,4,rep,name=redelivered,proto3" json:"redelivered,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsumerState) Reset() {
	*x = ConsumerState{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerState) ProtoMessage() {}

func (x *ConsumerState) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerState.ProtoReflect.Descriptor instead.
func (*ConsumerState) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{5}
}

func (x *ConsumerState) GetDelivered() *SequencePair {
	if x != nil {
		return x.Delivered
	}
	return nil
}

func (x *ConsumerState) GetAckFloor() *SequencePair {
	if x != nil {
		return x.AckFloor
	}
	return nil
}

func (x *ConsumerState) GetPending() map[uint64]*Pending {
	if x != nil {
		return x.Pending
	}
	return nil
}

func (x *ConsumerState) GetRedelivered() map[uint64]uint64 {
	if x != nil {
		return x.Redelivered
	}
	return nil
}

type ClientInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Host          string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Id            uint64                 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Account       string                 `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	Service       string                 `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	User          string                 `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Lang          string                 `protobuf:"bytes,8,opt,name=lang,proto3" json:"lang,omitempty"`
	Version       string                 `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	Rtt           *durationpb.Duration   `protobuf:"bytes,10,opt,name=rtt,proto3" json:"rtt,omitempty"`
	Server        string                 `protobuf:"bytes,11,opt,name=server,proto3" json:"server,omitempty"`
	Cluster       string                 `protobuf:"bytes,12,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Alternatiives []string               `protobuf:"bytes,13,rep,name=alternatiives,proto3" json:"alternatiives,omitempty"`
	Stop          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=stop,proto3" json:"stop,omitempty"`
	Jwt           string                 `protobuf:"bytes,15,opt,name=jwt,proto3" json:"jwt,omitempty"`
	IssuerKey     string                 `protobuf:"bytes,16,opt,name=issuer_key,json=issuerKey,proto3" json:"issuer_key,omitempty"`
	NameTag       string                 `protobuf:"bytes,17,opt,name=name_tag,json=nameTag,proto3" json:"name_tag,omitempty"`
	Tags          []string               `protobuf:"bytes,18,rep,name=tags,proto3" json:"tags,omitempty"`
	Kind          string                 `protobuf:"bytes,19,opt,name=kind,proto3" json:"kind,omitempty"`
	ClientType    string                 `protobuf:"bytes,20,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	MqttClient    string                 `protobuf:"bytes,21,opt,name=mqtt_client,json=mqttClient,proto3" json:"mqtt_client,omitempty"`
	Nonce         string                 `protobuf:"bytes,22,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{6}
}

func (x *ClientInfo) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ClientInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClientInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClientInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ClientInfo) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ClientInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClientInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientInfo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ClientInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClientInfo) GetRtt() *durationpb.Duration {
	if x != nil {
		return x.Rtt
	}
	return nil
}

func (x *ClientInfo) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *ClientInfo) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ClientInfo) GetAlternatiives() []string {
	if x != nil {
		return x.Alternatiives
	}
	return nil
}

func (x *ClientInfo) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ClientInfo) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *ClientInfo) GetIssuerKey() string {
	if x != nil {
		return x.IssuerKey
	}
	return ""
}

func (x *ClientInfo) GetNameTag() string {
	if x != nil {
		return x.NameTag
	}
	return ""
}

func (x *ClientInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ClientInfo) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ClientInfo) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *ClientInfo) GetMqttClient() string {
	if x != nil {
		return x.MqttClient
	}
	return ""
}

func (x *ClientInfo) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type StreamConfig struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	Name                  string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Subjects              []string                `protobuf:"bytes,3,rep,name=subjects,proto3" json:"subjects,omitempty"`
	Retention             RetentionPolicy         `protobuf:"varint,4,opt,name=retention,proto3,enum=natsserver.v1.RetentionPolicy" json:"retention,omitempty"`
	MaxConsumers          uint32                  `protobuf:"varint,5,opt,name=max_consumers,json=maxConsumers,proto3" json:"max_consumers,omitempty"`
	MaxMsgs               int64                   `protobuf:"varint,6,opt,name=max_msgs,json=maxMsgs,proto3" json:"max_msgs,omitempty"`
	MaxBytes              int64                   `protobuf:"varint,7,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	MaxAge                *durationpb.Duration    `protobuf:"bytes,8,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	MaxMsgsPer            int64                   `protobuf:"varint,9,opt,name=max_msgs_per,json=maxMsgsPer,proto3" json:"max_msgs_per,omitempty"`
	MaxMsgSize            int32                   `protobuf:"varint,10,opt,name=max_msg_size,json=maxMsgSize,proto3" json:"max_msg_size,omitempty"`
	Discard               DiscardPolicy           `protobuf:"varint,11,opt,name=discard,proto3,enum=natsserver.v1.DiscardPolicy" json:"discard,omitempty"`
	Storage               StorageType             `protobuf:"varint,12,opt,name=storage,proto3,enum=natsserver.v1.StorageType" json:"storage,omitempty"`
	Replicas              uint32                  `protobuf:"varint,13,opt,name=replicas,proto3" json:"replicas,omitempty"`
	NoAck                 bool                    `protobuf:"varint,14,opt,name=no_ack,json=noAck,proto3" json:"no_ack,omitempty"`
	Template              string                  `protobuf:"bytes,15,opt,name=template,proto3" json:"template,omitempty"`
	Duplicates            *durationpb.Duration    `protobuf:"bytes,16,opt,name=duplicates,proto3" json:"duplicates,omitempty"`
	Placement             *Placement              `protobuf:"bytes,17,opt,name=placement,proto3" json:"placement,omitempty"`
	Mirror                *StreamSource           `protobuf:"bytes,18,opt,name=mirror,proto3" json:"mirror,omitempty"`
	Sources               []*StreamSource         `protobuf:"bytes,19,rep,name=sources,proto3" json:"sources,omitempty"`
	Compression           StoreCompression        `protobuf:"varint,20,opt,name=compression,proto3,enum=natsserver.v1.StoreCompression" json:"compression,omitempty"`
	FirstSeq              uint64                  `protobuf:"varint,21,opt,name=first_seq,json=firstSeq,proto3" json:"first_seq,omitempty"`
	SubjectTransform      *SubjectTransformConfig `protobuf:"bytes,22,opt,name=subject_transform,json=subjectTransform,proto3" json:"subject_transform,omitempty"`
	RePublish             *RePublish              `protobuf:"bytes,23,opt,name=re_publish,json=rePublish,proto3" json:"re_publish,omitempty"`
	AllowDirect           bool                    `protobuf:"varint,24,opt,name=allow_direct,json=allowDirect,proto3" json:"allow_direct,omitempty"`
	MirrorDirect          bool                    `protobuf:"varint,25,opt,name=mirror_direct,json=mirrorDirect,proto3" json:"mirror_direct,omitempty"`
	DiscardNewPer         bool                    `protobuf:"varint,26,opt,name=discard_new_per,json=discardNewPer,proto3" json:"discard_new_per,omitempty"`
	Sealed                bool                    `protobuf:"varint,27,opt,name=sealed,proto3" json:"sealed,omitempty"`
	DenyDelete            bool                    `protobuf:"varint,28,opt,name=deny_delete,json=denyDelete,proto3" json:"deny_delete,omitempty"`
	DenyPurge             bool                    `protobuf:"varint,29,opt,name=deny_purge,json=denyPurge,proto3" json:"deny_purge,omitempty"`
	AllowRollup           bool                    `protobuf:"varint,30,opt,name=allow_rollup,json=allowRollup,proto3" json:"allow_rollup,omitempty"`
	ConsumerLimits        *StreamConsumerLimits   `protobuf:"bytes,31,opt,name=consumer_limits,json=consumerLimits,proto3" json:"consumer_limits,omitempty"`
	AllowMsgTtl           bool                    `protobuf:"varint,32,opt,name=allow_msg_ttl,json=allowMsgTtl,proto3" json:"allow_msg_ttl,omitempty"`
	SujectDeleteMarkerTtl *durationpb.Duration    `protobuf:"bytes,33,opt,name=suject_delete_marker_ttl,json=sujectDeleteMarkerTtl,proto3" json:"suject_delete_marker_ttl,omitempty"`
	Metadata              map[string]string       `protobuf:"bytes,34,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StreamConfig) Reset() {
	*x = StreamConfig{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConfig) ProtoMessage() {}

func (x *StreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConfig.ProtoReflect.Descriptor instead.
func (*StreamConfig) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{7}
}

func (x *StreamConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StreamConfig) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *StreamConfig) GetRetention() RetentionPolicy {
	if x != nil {
		return x.Retention
	}
	return RetentionPolicy_RetentionPolicyLimits
}

func (x *StreamConfig) GetMaxConsumers() uint32 {
	if x != nil {
		return x.MaxConsumers
	}
	return 0
}

func (x *StreamConfig) GetMaxMsgs() int64 {
	if x != nil {
		return x.MaxMsgs
	}
	return 0
}

func (x *StreamConfig) GetMaxBytes() int64 {
	if x != nil {
		return x.MaxBytes
	}
	return 0
}

func (x *StreamConfig) GetMaxAge() *durationpb.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *StreamConfig) GetMaxMsgsPer() int64 {
	if x != nil {
		return x.MaxMsgsPer
	}
	return 0
}

func (x *StreamConfig) GetMaxMsgSize() int32 {
	if x != nil {
		return x.MaxMsgSize
	}
	return 0
}

func (x *StreamConfig) GetDiscard() DiscardPolicy {
	if x != nil {
		return x.Discard
	}
	return DiscardPolicy_DiscardOld
}

func (x *StreamConfig) GetStorage() StorageType {
	if x != nil {
		return x.Storage
	}
	return StorageType_StorageTypeUnknown
}

func (x *StreamConfig) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *StreamConfig) GetNoAck() bool {
	if x != nil {
		return x.NoAck
	}
	return false
}

func (x *StreamConfig) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *StreamConfig) GetDuplicates() *durationpb.Duration {
	if x != nil {
		return x.Duplicates
	}
	return nil
}

func (x *StreamConfig) GetPlacement() *Placement {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *StreamConfig) GetMirror() *StreamSource {
	if x != nil {
		return x.Mirror
	}
	return nil
}

func (x *StreamConfig) GetSources() []*StreamSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *StreamConfig) GetCompression() StoreCompression {
	if x != nil {
		return x.Compression
	}
	return StoreCompression_None
}

func (x *StreamConfig) GetFirstSeq() uint64 {
	if x != nil {
		return x.FirstSeq
	}
	return 0
}

func (x *StreamConfig) GetSubjectTransform() *SubjectTransformConfig {
	if x != nil {
		return x.SubjectTransform
	}
	return nil
}

func (x *StreamConfig) GetRePublish() *RePublish {
	if x != nil {
		return x.RePublish
	}
	return nil
}

func (x *StreamConfig) GetAllowDirect() bool {
	if x != nil {
		return x.AllowDirect
	}
	return false
}

func (x *StreamConfig) GetMirrorDirect() bool {
	if x != nil {
		return x.MirrorDirect
	}
	return false
}

func (x *StreamConfig) GetDiscardNewPer() bool {
	if x != nil {
		return x.DiscardNewPer
	}
	return false
}

func (x *StreamConfig) GetSealed() bool {
	if x != nil {
		return x.Sealed
	}
	return false
}

func (x *StreamConfig) GetDenyDelete() bool {
	if x != nil {
		return x.DenyDelete
	}
	return false
}

func (x *StreamConfig) GetDenyPurge() bool {
	if x != nil {
		return x.DenyPurge
	}
	return false
}

func (x *StreamConfig) GetAllowRollup() bool {
	if x != nil {
		return x.AllowRollup
	}
	return false
}

func (x *StreamConfig) GetConsumerLimits() *StreamConsumerLimits {
	if x != nil {
		return x.ConsumerLimits
	}
	return nil
}

func (x *StreamConfig) GetAllowMsgTtl() bool {
	if x != nil {
		return x.AllowMsgTtl
	}
	return false
}

func (x *StreamConfig) GetSujectDeleteMarkerTtl() *durationpb.Duration {
	if x != nil {
		return x.SujectDeleteMarkerTtl
	}
	return nil
}

func (x *StreamConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RaftGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Peers         []string               `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
	Storage       StorageType            `protobuf:"varint,3,opt,name=storage,proto3,enum=natsserver.v1.StorageType" json:"storage,omitempty"`
	Cluster       string                 `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Preferred     string                 `protobuf:"bytes,5,opt,name=preferred,proto3" json:"preferred,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftGroup) Reset() {
	*x = RaftGroup{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftGroup) ProtoMessage() {}

func (x *RaftGroup) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftGroup.ProtoReflect.Descriptor instead.
func (*RaftGroup) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{8}
}

func (x *RaftGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaftGroup) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *RaftGroup) GetStorage() StorageType {
	if x != nil {
		return x.Storage
	}
	return StorageType_StorageTypeUnknown
}

func (x *RaftGroup) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *RaftGroup) GetPreferred() string {
	if x != nil {
		return x.Preferred
	}
	return ""
}

type StreamState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msgs          uint64                 `protobuf:"varint,1,opt,name=msgs,proto3" json:"msgs,omitempty"`
	Bytes         uint64                 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	FirstSeq      uint64                 `protobuf:"varint,3,opt,name=first_seq,json=firstSeq,proto3" json:"first_seq,omitempty"`
	FirstTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=first_time,json=firstTime,proto3" json:"first_time,omitempty"`
	LastSeq       uint64                 `protobuf:"varint,5,opt,name=last_seq,json=lastSeq,proto3" json:"last_seq,omitempty"`
	LastTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
	NumSubjects   uint32                 `protobuf:"varint,7,opt,name=num_subjects,json=numSubjects,proto3" json:"num_subjects,omitempty"`
	Subjects      map[string]uint64      `protobuf:"bytes,8,rep,name=subjects,proto3" json:"subjects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	NumDeleted    uint64                 `protobuf:"varint,9,opt,name=num_deleted,json=numDeleted,proto3" json:"num_deleted,omitempty"`
	Deleted       []uint64               `protobuf:"varint,10,rep,packed,name=deleted,proto3" json:"deleted,omitempty"`
	Lost          *LostStreamData        `protobuf:"bytes,11,opt,name=lost,proto3" json:"lost,omitempty"`
	Consumers     uint32                 `protobuf:"varint,12,opt,name=consumers,proto3" json:"consumers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamState) Reset() {
	*x = StreamState{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamState) ProtoMessage() {}

func (x *StreamState) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamState.ProtoReflect.Descriptor instead.
func (*StreamState) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{9}
}

func (x *StreamState) GetMsgs() uint64 {
	if x != nil {
		return x.Msgs
	}
	return 0
}

func (x *StreamState) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *StreamState) GetFirstSeq() uint64 {
	if x != nil {
		return x.FirstSeq
	}
	return 0
}

func (x *StreamState) GetFirstTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTime
	}
	return nil
}

func (x *StreamState) GetLastSeq() uint64 {
	if x != nil {
		return x.LastSeq
	}
	return 0
}

func (x *StreamState) GetLastTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTime
	}
	return nil
}

func (x *StreamState) GetNumSubjects() uint32 {
	if x != nil {
		return x.NumSubjects
	}
	return 0
}

func (x *StreamState) GetSubjects() map[string]uint64 {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *StreamState) GetNumDeleted() uint64 {
	if x != nil {
		return x.NumDeleted
	}
	return 0
}

func (x *StreamState) GetDeleted() []uint64 {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *StreamState) GetLost() *LostStreamData {
	if x != nil {
		return x.Lost
	}
	return nil
}

func (x *StreamState) GetConsumers() uint32 {
	if x != nil {
		return x.Consumers
	}
	return 0
}

type LostStreamData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msgs          []uint64               `protobuf:"varint,1,rep,packed,name=msgs,proto3" json:"msgs,omitempty"`
	Bytes         uint64                 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LostStreamData) Reset() {
	*x = LostStreamData{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LostStreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LostStreamData) ProtoMessage() {}

func (x *LostStreamData) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LostStreamData.ProtoReflect.Descriptor instead.
func (*LostStreamData) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{10}
}

func (x *LostStreamData) GetMsgs() []uint64 {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *LostStreamData) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type Placement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cluster       string                 `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tags          []string               `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Preferred     string                 `protobuf:"bytes,3,opt,name=preferred,proto3" json:"preferred,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Placement) Reset() {
	*x = Placement{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Placement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placement) ProtoMessage() {}

func (x *Placement) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placement.ProtoReflect.Descriptor instead.
func (*Placement) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{11}
}

func (x *Placement) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Placement) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Placement) GetPreferred() string {
	if x != nil {
		return x.Preferred
	}
	return ""
}

type StreamSource struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Name              string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OptStartSeq       uint64                    `protobuf:"varint,2,opt,name=opt_start_seq,json=optStartSeq,proto3" json:"opt_start_seq,omitempty"`
	OptStartTime      *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=opt_start_time,json=optStartTime,proto3" json:"opt_start_time,omitempty"`
	FilterSubject     string                    `protobuf:"bytes,4,opt,name=filter_subject,json=filterSubject,proto3" json:"filter_subject,omitempty"`
	SubjectTransforms []*SubjectTransformConfig `protobuf:"bytes,5,rep,name=subject_transforms,json=subjectTransforms,proto3" json:"subject_transforms,omitempty"`
	External          *ExternalStream           `protobuf:"bytes,6,opt,name=external,proto3" json:"external,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamSource) Reset() {
	*x = StreamSource{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSource) ProtoMessage() {}

func (x *StreamSource) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSource.ProtoReflect.Descriptor instead.
func (*StreamSource) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{12}
}

func (x *StreamSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamSource) GetOptStartSeq() uint64 {
	if x != nil {
		return x.OptStartSeq
	}
	return 0
}

func (x *StreamSource) GetOptStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OptStartTime
	}
	return nil
}

func (x *StreamSource) GetFilterSubject() string {
	if x != nil {
		return x.FilterSubject
	}
	return ""
}

func (x *StreamSource) GetSubjectTransforms() []*SubjectTransformConfig {
	if x != nil {
		return x.SubjectTransforms
	}
	return nil
}

func (x *StreamSource) GetExternal() *ExternalStream {
	if x != nil {
		return x.External
	}
	return nil
}

type SubjectTransformConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination   string                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubjectTransformConfig) Reset() {
	*x = SubjectTransformConfig{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectTransformConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectTransformConfig) ProtoMessage() {}

func (x *SubjectTransformConfig) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectTransformConfig.ProtoReflect.Descriptor instead.
func (*SubjectTransformConfig) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{13}
}

func (x *SubjectTransformConfig) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SubjectTransformConfig) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type RePublish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination   string                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	HeadersOnly   bool                   `protobuf:"varint,3,opt,name=headers_only,json=headersOnly,proto3" json:"headers_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RePublish) Reset() {
	*x = RePublish{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RePublish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RePublish) ProtoMessage() {}

func (x *RePublish) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RePublish.ProtoReflect.Descriptor instead.
func (*RePublish) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{14}
}

func (x *RePublish) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RePublish) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *RePublish) GetHeadersOnly() bool {
	if x != nil {
		return x.HeadersOnly
	}
	return false
}

type StreamConsumerLimits struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	InactiveThreshold *durationpb.Duration   `protobuf:"bytes,1,opt,name=inactive_threshold,json=inactiveThreshold,proto3" json:"inactive_threshold,omitempty"`
	MaxAckPending     uint32                 `protobuf:"varint,2,opt,name=max_ack_pending,json=maxAckPending,proto3" json:"max_ack_pending,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamConsumerLimits) Reset() {
	*x = StreamConsumerLimits{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamConsumerLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConsumerLimits) ProtoMessage() {}

func (x *StreamConsumerLimits) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConsumerLimits.ProtoReflect.Descriptor instead.
func (*StreamConsumerLimits) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{15}
}

func (x *StreamConsumerLimits) GetInactiveThreshold() *durationpb.Duration {
	if x != nil {
		return x.InactiveThreshold
	}
	return nil
}

func (x *StreamConsumerLimits) GetMaxAckPending() uint32 {
	if x != nil {
		return x.MaxAckPending
	}
	return 0
}

type ExternalStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiPrefix     string                 `protobuf:"bytes,1,opt,name=api_prefix,json=apiPrefix,proto3" json:"api_prefix,omitempty"`
	DeliverPrefix string                 `protobuf:"bytes,2,opt,name=deliver_prefix,json=deliverPrefix,proto3" json:"deliver_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalStream) Reset() {
	*x = ExternalStream{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalStream) ProtoMessage() {}

func (x *ExternalStream) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalStream.ProtoReflect.Descriptor instead.
func (*ExternalStream) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{16}
}

func (x *ExternalStream) GetApiPrefix() string {
	if x != nil {
		return x.ApiPrefix
	}
	return ""
}

func (x *ExternalStream) GetDeliverPrefix() string {
	if x != nil {
		return x.DeliverPrefix
	}
	return ""
}

type Pending struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sequence      uint64                 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pending) Reset() {
	*x = Pending{}
	mi := &file_natsserver_v1_metadata_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pending) ProtoMessage() {}

func (x *Pending) ProtoReflect() protoreflect.Message {
	mi := &file_natsserver_v1_metadata_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pending.ProtoReflect.Descriptor instead.
func (*Pending) Descriptor() ([]byte, []int) {
	return file_natsserver_v1_metadata_proto_rawDescGZIP(), []int{17}
}

func (x *Pending) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Pending) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_natsserver_v1_metadata_proto protoreflect.FileDescriptor

var file_natsserver_v1_metadata_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x57, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e,
	0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x19, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e,
	0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x22, 0xfd, 0x02, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xff, 0x0c, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e,
	0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x40, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x37, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x47,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x46, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x74, 0x74, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x74, 0x6c, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x0c,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x22, 0xae, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x61,
	0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x0b,
	0x72, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x52, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x1a, 0x52, 0x0a,
	0x0c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xed, 0x04, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x71,
	0x74, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x71, 0x74, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x22, 0xb1, 0x0c, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x73, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4d, 0x73,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x78,
	0x41, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x73,
	0x67, 0x73, 0x50, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x4d, 0x73, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6e, 0x6f, 0x41, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61,
	0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x09, 0x72, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x79,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64,
	0x65, 0x6e, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6e,
	0x79, 0x5f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64,
	0x65, 0x6e, 0x79, 0x50, 0x75, 0x72, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x12, 0x4c, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x73, 0x67, 0x54, 0x74, 0x6c, 0x12, 0x52, 0x0a,
	0x18, 0x73, 0x75, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x73, 0x75, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x74,
	0x6c, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0x95, 0x04, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53,
	0x65, 0x71, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0e, 0x4c, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x57, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0xc0, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x71, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x12, 0x39, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x52, 0x0a, 0x16, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x68, 0x0a, 0x09, 0x52, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x56, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x5f, 0x0a, 0x07,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x35, 0x0a,
	0x09, 0x41, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x63,
	0x6b, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x6b, 0x41, 0x6c,
	0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x10, 0x02, 0x2a, 0x35, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x2a, 0x8f, 0x01, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x05, 0x2a, 0x67, 0x0a,
	0x0f, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x4f, 0x6c, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x65, 0x77, 0x10, 0x01, 0x2a, 0x6c, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x10, 0x21, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f,
	0x6e, 0x6c, 0x79, 0x10, 0x2c, 0x2a, 0x24, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x32, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x0e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x77, 0x66,
	0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x42,
	0xb5, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x79, 0x6e, 0x61, 0x64, 0x69, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f,
	0x6e, 0x61, 0x74, 0x73, 0x71, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x61,
	0x74, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x4e, 0x61, 0x74,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x4e, 0x61, 0x74,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x4e, 0x61, 0x74,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4e, 0x61, 0x74, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_natsserver_v1_metadata_proto_rawDescOnce sync.Once
	file_natsserver_v1_metadata_proto_rawDescData []byte
)

func file_natsserver_v1_metadata_proto_rawDescGZIP() []byte {
	file_natsserver_v1_metadata_proto_rawDescOnce.Do(func() {
		file_natsserver_v1_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_natsserver_v1_metadata_proto_rawDesc), len(file_natsserver_v1_metadata_proto_rawDesc)))
	})
	return file_natsserver_v1_metadata_proto_rawDescData
}

var file_natsserver_v1_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_natsserver_v1_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_natsserver_v1_metadata_proto_goTypes = []any{
	(AckPolicy)(0),                    // 0: natsserver.v1.AckPolicy
	(ReplayPolicy)(0),                 // 1: natsserver.v1.ReplayPolicy
	(DeliverPolicy)(0),                // 2: natsserver.v1.DeliverPolicy
	(RetentionPolicy)(0),              // 3: natsserver.v1.RetentionPolicy
	(DiscardPolicy)(0),                // 4: natsserver.v1.DiscardPolicy
	(StorageType)(0),                  // 5: natsserver.v1.StorageType
	(StoreCompression)(0),             // 6: natsserver.v1.StoreCompression
	(PriorityPolicy)(0),               // 7: natsserver.v1.PriorityPolicy
	(*StreamMetadata)(nil),            // 8: natsserver.v1.StreamMetadata
	(*WriteableStreamAssignment)(nil), // 9: natsserver.v1.WriteableStreamAssignment
	(*ConsumerAssignment)(nil),        // 10: natsserver.v1.ConsumerAssignment
	(*ConsumerConfig)(nil),            // 11: natsserver.v1.ConsumerConfig
	(*SequencePair)(nil),              // 12: natsserver.v1.SequencePair
	(*ConsumerState)(nil),             // 13: natsserver.v1.ConsumerState
	(*ClientInfo)(nil),                // 14: natsserver.v1.ClientInfo
	(*StreamConfig)(nil),              // 15: natsserver.v1.StreamConfig
	(*RaftGroup)(nil),                 // 16: natsserver.v1.RaftGroup
	(*StreamState)(nil),               // 17: natsserver.v1.StreamState
	(*LostStreamData)(nil),            // 18: natsserver.v1.LostStreamData
	(*Placement)(nil),                 // 19: natsserver.v1.Placement
	(*StreamSource)(nil),              // 20: natsserver.v1.StreamSource
	(*SubjectTransformConfig)(nil),    // 21: natsserver.v1.SubjectTransformConfig
	(*RePublish)(nil),                 // 22: natsserver.v1.RePublish
	(*StreamConsumerLimits)(nil),      // 23: natsserver.v1.StreamConsumerLimits
	(*ExternalStream)(nil),            // 24: natsserver.v1.ExternalStream
	(*Pending)(nil),                   // 25: natsserver.v1.Pending
	nil,                               // 26: natsserver.v1.ConsumerConfig.MetadataEntry
	nil,                               // 27: natsserver.v1.ConsumerState.PendingEntry
	nil,                               // 28: natsserver.v1.ConsumerState.RedeliveredEntry
	nil,                               // 29: natsserver.v1.StreamConfig.MetadataEntry
	nil,                               // 30: natsserver.v1.StreamState.SubjectsEntry
	(*timestamppb.Timestamp)(nil),     // 31: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 32: google.protobuf.Duration
}
var file_natsserver_v1_metadata_proto_depIdxs = []int32{
	9,  // 0: natsserver.v1.StreamMetadata.stream_assignments:type_name -> natsserver.v1.WriteableStreamAssignment
	14, // 1: natsserver.v1.WriteableStreamAssignment.client:type_name -> natsserver.v1.ClientInfo
	31, // 2: natsserver.v1.WriteableStreamAssignment.created:type_name -> google.protobuf.Timestamp
	15, // 3: natsserver.v1.WriteableStreamAssignment.config:type_name -> natsserver.v1.StreamConfig
	16, // 4: natsserver.v1.WriteableStreamAssignment.group:type_name -> natsserver.v1.RaftGroup
	10, // 5: natsserver.v1.WriteableStreamAssignment.consumers:type_name -> natsserver.v1.ConsumerAssignment
	14, // 6: natsserver.v1.ConsumerAssignment.client_info:type_name -> natsserver.v1.ClientInfo
	31, // 7: natsserver.v1.ConsumerAssignment.created:type_name -> google.protobuf.Timestamp
	11, // 8: natsserver.v1.ConsumerAssignment.config:type_name -> natsserver.v1.ConsumerConfig
	16, // 9: natsserver.v1.ConsumerAssignment.group:type_name -> natsserver.v1.RaftGroup
	13, // 10: natsserver.v1.ConsumerAssignment.state:type_name -> natsserver.v1.ConsumerState
	2,  // 11: natsserver.v1.ConsumerConfig.deliver_policy:type_name -> natsserver.v1.DeliverPolicy
	31, // 12: natsserver.v1.ConsumerConfig.opt_start_time:type_name -> google.protobuf.Timestamp
	0,  // 13: natsserver.v1.ConsumerConfig.ack_policy:type_name -> natsserver.v1.AckPolicy
	32, // 14: natsserver.v1.ConsumerConfig.ack_wait:type_name -> google.protobuf.Duration
	32, // 15: natsserver.v1.ConsumerConfig.backoff:type_name -> google.protobuf.Duration
	1,  // 16: natsserver.v1.ConsumerConfig.replay_policy:type_name -> natsserver.v1.ReplayPolicy
	32, // 17: natsserver.v1.ConsumerConfig.max_request_expires:type_name -> google.protobuf.Duration
	32, // 18: natsserver.v1.ConsumerConfig.heartbeat:type_name -> google.protobuf.Duration
	32, // 19: natsserver.v1.ConsumerConfig.inactive_threshold:type_name -> google.protobuf.Duration
	26, // 20: natsserver.v1.ConsumerConfig.metadata:type_name -> natsserver.v1.ConsumerConfig.MetadataEntry
	31, // 21: natsserver.v1.ConsumerConfig.pause_until:type_name -> google.protobuf.Timestamp
	7,  // 22: natsserver.v1.ConsumerConfig.priority_policy:type_name -> natsserver.v1.PriorityPolicy
	32, // 23: natsserver.v1.ConsumerConfig.pinned_ttl:type_name -> google.protobuf.Duration
	12, // 24: natsserver.v1.ConsumerState.delivered:type_name -> natsserver.v1.SequencePair
	12, // 25: natsserver.v1.ConsumerState.ack_floor:type_name -> natsserver.v1.SequencePair
	27, // 26: natsserver.v1.ConsumerState.pending:type_name -> natsserver.v1.ConsumerState.PendingEntry
	28, // 27: natsserver.v1.ConsumerState.redelivered:type_name -> natsserver.v1.ConsumerState.RedeliveredEntry
	31, // 28: natsserver.v1.ClientInfo.start:type_name -> google.protobuf.Timestamp
	32, // 29: natsserver.v1.ClientInfo.rtt:type_name -> google.protobuf.Duration
	31, // 30: natsserver.v1.ClientInfo.stop:type_name -> google.protobuf.Timestamp
	3,  // 31: natsserver.v1.StreamConfig.retention:type_name -> natsserver.v1.RetentionPolicy
	32, // 32: natsserver.v1.StreamConfig.max_age:type_name -> google.protobuf.Duration
	4,  // 33: natsserver.v1.StreamConfig.discard:type_name -> natsserver.v1.DiscardPolicy
	5,  // 34: natsserver.v1.StreamConfig.storage:type_name -> natsserver.v1.StorageType
	32, // 35: natsserver.v1.StreamConfig.duplicates:type_name -> google.protobuf.Duration
	19, // 36: natsserver.v1.StreamConfig.placement:type_name -> natsserver.v1.Placement
	20, // 37: natsserver.v1.StreamConfig.mirror:type_name -> natsserver.v1.StreamSource
	20, // 38: natsserver.v1.StreamConfig.sources:type_name -> natsserver.v1.StreamSource
	6,  // 39: natsserver.v1.StreamConfig.compression:type_name -> natsserver.v1.StoreCompression
	21, // 40: natsserver.v1.StreamConfig.subject_transform:type_name -> natsserver.v1.SubjectTransformConfig
	22, // 41: natsserver.v1.StreamConfig.re_publish:type_name -> natsserver.v1.RePublish
	23, // 42: natsserver.v1.StreamConfig.consumer_limits:type_name -> natsserver.v1.StreamConsumerLimits
	32, // 43: natsserver.v1.StreamConfig.suject_delete_marker_ttl:type_name -> google.protobuf.Duration
	29, // 44: natsserver.v1.StreamConfig.metadata:type_name -> natsserver.v1.StreamConfig.MetadataEntry
	5,  // 45: natsserver.v1.RaftGroup.storage:type_name -> natsserver.v1.StorageType
	31, // 46: natsserver.v1.StreamState.first_time:type_name -> google.protobuf.Timestamp
	31, // 47: natsserver.v1.StreamState.last_time:type_name -> google.protobuf.Timestamp
	30, // 48: natsserver.v1.StreamState.subjects:type_name -> natsserver.v1.StreamState.SubjectsEntry
	18, // 49: natsserver.v1.StreamState.lost:type_name -> natsserver.v1.LostStreamData
	31, // 50: natsserver.v1.StreamSource.opt_start_time:type_name -> google.protobuf.Timestamp
	21, // 51: natsserver.v1.StreamSource.subject_transforms:type_name -> natsserver.v1.SubjectTransformConfig
	24, // 52: natsserver.v1.StreamSource.external:type_name -> natsserver.v1.ExternalStream
	32, // 53: natsserver.v1.StreamConsumerLimits.inactive_threshold:type_name -> google.protobuf.Duration
	31, // 54: natsserver.v1.Pending.timestamp:type_name -> google.protobuf.Timestamp
	25, // 55: natsserver.v1.ConsumerState.PendingEntry.value:type_name -> natsserver.v1.Pending
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_natsserver_v1_metadata_proto_init() }
func file_natsserver_v1_metadata_proto_init() {
	if File_natsserver_v1_metadata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_natsserver_v1_metadata_proto_rawDesc), len(file_natsserver_v1_metadata_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_natsserver_v1_metadata_proto_goTypes,
		DependencyIndexes: file_natsserver_v1_metadata_proto_depIdxs,
		EnumInfos:         file_natsserver_v1_metadata_proto_enumTypes,
		MessageInfos:      file_natsserver_v1_metadata_proto_msgTypes,
	}.Build()
	File_natsserver_v1_metadata_proto = out.File
	file_natsserver_v1_metadata_proto_goTypes = nil
	file_natsserver_v1_metadata_proto_depIdxs = nil
}
